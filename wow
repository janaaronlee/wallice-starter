#!/bin/bash

configure_colors()
{
  NC='\033[0m'

  RED='\033[0;31m'

  DARK_GREEN='\033[0;32m'
  LIGHT_GREEN='\033[1;32m'

  YELLOW='\033[1;33m'

  LIGHT_BLUE='\033[1;34m'

  PURPLE='\033[0;35m'

  WHITE='\033[1;37m'
}

splash() {

  # ascii art image credits: https://rlv.zcache.com/japanese_ascii_art_octopus_paul_left_custom_mouse_pad-r221cf254d3724982ba863c8bf29792fa_x74vi_8byvr_324.jpg

  echo '
    O      ___    O
     o   /     \  o
   (\   /      /   o
    || |      /) o
    \ >W(o)W /8/\
 (\__)/ / / / o_)
  \_ J o|8|8| L|)
  (_/\_)_)_) _/

     just wow.
'
}

should_be_in_docker()
{
  if [ "$DOCKER_ENV" != true ];
  then
    printf "${RED}[WoW] This program cannot be run [[ OUTSIDE ]] a wow-configured docker instance! Exiting..${NC}\n"
    exit
  fi
}

should_be_out_docker()
{
  if [ "$DOCKER_ENV" = true ];
  then
    printf "${RED}[WoW] This program cannot be run [[ INSIDE ]] a wow-configured docker instance! Exiting..${NC}\n"
    exit
  fi
}

set_project()
{
  CONFIG_FILE=.chalice/config.json
  PROJECT=$( sed -n 's/.*"app_name": "\(.*\)",/\1/p' $CONFIG_FILE )
}

export_vars()
{
  export PROJECT
  export REAL_USER=$( id -u $USER ):$( id -g $USER )
  export DOCKER_ENV=true
}

yours()
{
  should_be_in_docker
  chown -R root:root ~/.ssh
}

mine()
{
  if [ "$DOCKER_ENV" != true ];
  then
    sudo chown -R $( id -u $USER ):$( id -g $USER ) . ~/.ssh
  else
    chown -R "$REAL_USER" . ~/.ssh
  fi
}

install()
{
  should_be_in_docker
  SRC_DIR=src

  printf "${LIGHT_BLUE}[WoW] Installing dependencies..${NC}\n"
  set -e
  yours

  if [ -f setup.py ]
  then
  	pip install -q -e .
  elif [ -f requirements-dev.txt ]
  then
  	pip install -r requirements-dev.txt
  else
    printf "${YELLOW}[WoW] Found nothing to be installed!${NC}\n"
  fi

  mine
  set +x
}

run()
{
  splash
  should_be_out_docker
  set_project
  export_vars

  COMPOSE_FILE=docker-compose.yml

  printf "${DARK_GREEN}[WoW] Starting containers..${NC}\n"
  docker-compose -f "$COMPOSE_FILE" -p "$PROJECT" up -d

  CONTAINER=app."$PROJECT".docker

  printf "${DARK_GREEN}[WoW] Checking dependencies (and installing them if necessary)..${NC}\n"
  docker exec -it "$CONTAINER" /bin/bash ./wow install --non-interactive

  printf "${LIGHT_GREEN}[WoW] Welcome to your all-in-one containerized development environment!${NC}\n"
  docker exec -it "$CONTAINER" /bin/bash

  # NOTE: make sure that all files are owned by the "$REAL_USER"
  docker exec "$CONTAINER" chown -R "$REAL_USER" .

  printf "${DARK_GREEN}[WoW] Stopping containers..${NC}\n"
  docker-compose -f "$COMPOSE_FILE" -p $PROJECT stop
}

exec()
{
  splash
  should_be_out_docker
  set_project

  CONTAINER=app."$PROJECT".docker
  printf "${LIGHT_GREEN}[WoW] Connecting to ${CONTAINER}..${NC}\n"
  docker exec -it "$CONTAINER" /bin/bash
}

stop()
{
  splash
  should_be_out_docker
  set_project

  printf "${RED}[WoW] Stopping ${WHITE}[$PROJECT]${RED} containers..${NC}\n"
  docker ps -a | grep .$PROJECT.docker | awk '{ print $1 }' | xargs docker stop
}

rm()
{
  splash
  should_be_out_docker
  set_project

  printf "${RED}[WoW] Safe-deleting ${WHITE}[$PROJECT]${RED} containers..${NC}\n"
  docker ps -a | grep .$PROJECT.docker | awk '{ print $1 }' | xargs docker rm
}

cmd()
{
  if [ -z "$1" ]
    then
      set_project

      CMD=run
      APP_CONTAINER="app.$PROJECT.docker"
      if [ -n "$( docker ps -a | grep $APP_CONTAINER )" ]
      then
        if [ "$( docker inspect -f '{{.State.Running}}' $APP_CONTAINER )" == true ]
        then
          CMD=exec
        fi
      fi
    else
      CMD="$1"
  fi

  "$CMD" "${@:2}"
}

configure_colors
cmd "$@"
